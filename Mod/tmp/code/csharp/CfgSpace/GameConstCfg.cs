// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CfgSpace
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameConstCfg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_11_23(); }
  public static GameConstCfg GetRootAsGameConstCfg(ByteBuffer _bb) { return GetRootAsGameConstCfg(_bb, new GameConstCfg()); }
  public static GameConstCfg GetRootAsGameConstCfg(ByteBuffer _bb, GameConstCfg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameConstCfg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ParamString { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParamStringBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParamStringBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParamStringArray() { return __p.__vector_as_array<byte>(6); }
  public int ParamInt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ParamIntArray(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ParamIntArrayLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetParamIntArrayBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetParamIntArrayBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetParamIntArrayArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<CfgSpace.GameConstCfg> CreateGameConstCfg(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset paramStringOffset = default(StringOffset),
      int paramInt = 0,
      VectorOffset paramIntArrayOffset = default(VectorOffset)) {
    builder.StartTable(4);
    GameConstCfg.AddParamIntArray(builder, paramIntArrayOffset);
    GameConstCfg.AddParamInt(builder, paramInt);
    GameConstCfg.AddParamString(builder, paramStringOffset);
    GameConstCfg.AddId(builder, idOffset);
    return GameConstCfg.EndGameConstCfg(builder);
  }

  public static void StartGameConstCfg(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddParamString(FlatBufferBuilder builder, StringOffset paramStringOffset) { builder.AddOffset(1, paramStringOffset.Value, 0); }
  public static void AddParamInt(FlatBufferBuilder builder, int paramInt) { builder.AddInt(2, paramInt, 0); }
  public static void AddParamIntArray(FlatBufferBuilder builder, VectorOffset paramIntArrayOffset) { builder.AddOffset(3, paramIntArrayOffset.Value, 0); }
  public static VectorOffset CreateParamIntArrayVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParamIntArrayVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParamIntArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateParamIntArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartParamIntArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CfgSpace.GameConstCfg> EndGameConstCfg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CfgSpace.GameConstCfg>(o);
  }
}


}
